import unittest
import numpy as np
from Board import Board
from section_type import Section
import utils

board = np.array([
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
])

posibilities = Board.create_posibility_matrix(board)


class TestUtils(unittest.TestCase):
    # def test_subtract_imposible_numbers_from_section()
    def test_get_posibility_section(self):
        posibility_section = utils.get_posibility_section(
            Section.Row, 0, posibilities)
        np.testing.assert_array_equal(posibility_section, [
            [0, 0, 0, 0, 5, 0, 0, 0, 0],
            [0, 0, 3, 0, 0, 0, 0, 0, 0],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [0, 0, 0, 0, 0, 0, 7, 0, 0],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9]
        ])

        posibility_section = utils.get_posibility_section(
            Section.Column, 0, posibilities)
        np.testing.assert_array_equal(posibility_section, [
            [0, 0, 0, 0, 5, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 6, 0, 0, 0],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [0, 0, 0, 0, 0, 0, 0, 8, 0],
            [0, 0, 0, 4, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 7, 0, 0],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9]
        ])

        posibility_section = utils.get_posibility_section(
            Section.Box, 0, posibilities)
        np.testing.assert_array_equal(posibility_section, [
            [0, 0, 0, 0, 5, 0, 0, 0, 0],
            [0, 0, 3, 0, 0, 0, 0, 0, 0],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [0, 0, 0, 0, 0, 6, 0, 0, 0],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [1, 2, 3, 4, 5, 6, 7, 8, 9],
            [0, 0, 0, 0, 0, 0, 0, 0, 9],
            [0, 0, 0, 0, 0, 0, 0, 8, 0]
        ])

    def test_get_solved_and_unsolved_in_section(self):
        solved_numbers, unsolved_indexes = utils.get_solved_and_unsolved_in_section(
            np.array([
                [0, 0, 0, 0, 5, 0, 0, 0, 0],
                [0, 0, 3, 0, 0, 0, 0, 0, 0],
                [1, 2, 3, 4, 5, 6, 7, 8, 9],
                [1, 2, 3, 4, 5, 6, 7, 8, 9],
                [0, 0, 0, 0, 0, 0, 7, 0, 0],
                [1, 2, 3, 4, 5, 6, 7, 8, 9],
                [1, 2, 3, 4, 5, 6, 7, 8, 9],
                [1, 2, 3, 4, 5, 6, 7, 8, 9],
                [1, 2, 3, 4, 5, 6, 7, 8, 9]
            ]))

        np.testing.assert_array_equal(solved_numbers, [
            5, 3, 7
        ])
        np.testing.assert_array_equal(unsolved_indexes, [
            2, 3, 5, 6, 7, 8
        ])

    def test_get_unsolved_cell_indexes(self):
        unsolved_cells = utils.get_unsolved_cell_indexes(posibilities)
        np.testing.assert_array_equal(unsolved_cells, [
            [0, 2], [0, 3], [0, 5], [0, 6], [0, 7], [0, 8],
            [1, 1], [1, 2], [1, 6], [1, 7], [1, 8],
            [2, 0], [2, 3], [2, 4], [2, 5], [2, 6], [2, 8],
            [3, 1], [3, 2], [3, 3], [3, 5], [3, 6], [3, 7],
            [4, 1], [4, 2], [4, 4], [4, 6], [4, 7],
            [5, 1], [5, 2], [5, 3], [5, 5], [5, 6], [5, 7],
            [6, 0], [6, 2], [6, 3], [6, 4], [6, 5], [6, 8],
            [7, 0], [7, 1], [7, 2], [7, 6], [7, 7],
            [8, 0], [8, 1], [8, 2], [8, 3], [8, 5], [8, 6]
        ])
    # def test_remove_posibilities1(self):
    #     utils.remove_posibilities1(posibilities)
    #     np.testing.assert_array_equal(posibilities, [
    #         [
    #             [0, 0, 0, 0, 5, 0, 0, 0, 0],
    #             [0, 0, 3, 0, 0, 0, 0, 0, 0],
    #             [1, 2, 0, 4, 0, 6, 0, 8, 9],
    #             [1, 2, 0, 4, 0, 6, 0, 8, 9],
    #             [0, 0, 0, 0, 0, 0, 7, 0, 0],
    #             [1, 2, 0, 4, 0, 6, 0, 8, 9],
    #             [1, 2, 0, 4, 0, 6, 0, 8, 9],
    #             [1, 2, 0, 4, 0, 6, 0, 8, 9],
    #             [1, 2, 0, 4, 0, 6, 0, 8, 9]
    #         ],
    #         [
    #             [0, 0, 0, 0, 0, 6, 0, 0, 0],
    #             [0, 2, 3, 4, 0, 0, 7, 8, 0],
    #             [0, 2, 3, 4, 0, 0, 7, 8, 0],
    #             [1, 0, 0, 0, 0, 0, 0, 0, 0],
    #             [0, 0, 0, 0, 0, 0, 0, 0, 9],
    #             [0, 0, 0, 0, 5, 0, 0, 0, 0],
    #             [0, 2, 3, 4, 0, 0, 7, 8, 0],
    #             [0, 2, 3, 4, 0, 0, 7, 8, 0],
    #             [0, 2, 3, 4, 0, 0, 7, 8, 0]
    #         ],
    #         [
    #             [1, 2, 3, 4, 5, 0, 7, 0, 0],
    #             [0, 0, 0, 0, 0, 0, 0, 0, 9],
    #             [0, 0, 0, 0, 0, 0, 0, 8, 0],
    #             [1, 2, 3, 4, 5, 0, 7, 0, 0],
    #             [1, 2, 3, 4, 5, 0, 7, 0, 0],
    #             [1, 2, 3, 4, 5, 0, 7, 0, 0],
    #             [1, 2, 3, 4, 5, 0, 7, 0, 0],
    #             [0, 0, 0, 0, 0, 6, 0, 0, 0],
    #             [1, 2, 3, 4, 5, 0, 7, 0, 0]
    #         ],
    #         [
    #             [0, 0, 0, 0, 0, 0, 0, 8, 0],
    #             [1, 2, 0, 4, 5, 0, 7, 0, 9],
    #             [1, 2, 0, 4, 5, 0, 7, 0, 9],
    #             [1, 2, 0, 4, 5, 0, 7, 0, 9],
    #             [0, 0, 0, 0, 0, 6, 0, 0, 0],
    #             [1, 2, 0, 4, 5, 0, 7, 0, 9],
    #             [1, 2, 0, 4, 5, 0, 7, 0, 9],
    #             [1, 2, 0, 4, 5, 0, 7, 0, 9],
    #             [0, 0, 3, 0, 0, 0, 0, 0, 0]
    #         ],
    #         [
    #             [0, 0, 0, 4, 0, 0, 0, 0, 0],
    #             [0, 2, 0, 0, 5, 6, 7, 0, 9],
    #             [0, 2, 0, 0, 5, 6, 7, 0, 9],
    #             [0, 0, 0, 0, 0, 0, 0, 8, 0],
    #             [0, 2, 0, 0, 5, 6, 7, 0, 9],
    #             [0, 0, 3, 0, 0, 0, 0, 0, 0],
    #             [0, 2, 0, 0, 5, 6, 7, 0, 9],
    #             [0, 2, 0, 0, 5, 6, 7, 0, 9],
    #             [1, 0, 0, 0, 0, 0, 0, 0, 0]
    #         ],
    #         [
    #             [0, 0, 0, 0, 0, 0, 7, 0, 0],
    #             [1, 0, 3, 4, 5, 0, 0, 8, 9],
    #             [1, 0, 3, 4, 5, 0, 0, 8, 9],
    #             [1, 0, 3, 4, 5, 0, 0, 8, 9],
    #             [0, 2, 0, 0, 0, 0, 0, 0, 0],
    #             [1, 0, 3, 4, 5, 0, 0, 8, 9],
    #             [1, 0, 3, 4, 5, 0, 0, 8, 9],
    #             [1, 0, 3, 4, 5, 0, 0, 8, 9],
    #             [0, 0, 0, 0, 0, 6, 0, 0, 0]
    #         ],
    #         [
    #             [1, 0, 3, 4, 5, 0, 7, 0, 9],
    #             [0, 0, 0, 0, 0, 6, 0, 0, 0],
    #             [1, 0, 3, 4, 5, 0, 7, 0, 9],
    #             [1, 0, 3, 4, 5, 0, 7, 0, 9],
    #             [1, 0, 3, 4, 5, 0, 7, 0, 9],
    #             [1, 0, 3, 4, 5, 0, 7, 0, 9],
    #             [0, 2, 0, 0, 0, 0, 0, 0, 0],
    #             [0, 0, 0, 0, 0, 0, 0, 8, 0],
    #             [1, 0, 3, 4, 5, 0, 7, 0, 9]
    #         ],
    #         [
    #             [0, 2, 3, 0, 0, 6, 7, 8, 0],
    #             [0, 2, 3, 0, 0, 6, 7, 8, 0],
    #             [0, 2, 3, 0, 0, 6, 7, 8, 0],
    #             [0, 0, 0, 4, 0, 0, 0, 0, 0],
    #             [1, 0, 0, 0, 0, 0, 0, 0, 0],
    #             [0, 0, 0, 0, 0, 0, 0, 0, 9],
    #             [0, 2, 3, 0, 0, 6, 7, 8, 0],
    #             [0, 2, 3, 0, 0, 6, 7, 8, 0],
    #             [0, 0, 0, 0, 5, 0, 0, 0, 0]
    #         ],
    #         [
    #             [1, 2, 3, 4, 5, 6, 0, 0, 0],
    #             [1, 2, 3, 4, 5, 6, 0, 0, 0],
    #             [1, 2, 3, 4, 5, 6, 0, 0, 0],
    #             [1, 2, 3, 4, 5, 6, 0, 0, 0],
    #             [0, 0, 0, 0, 0, 0, 0, 8, 0],
    #             [1, 2, 3, 4, 5, 6, 0, 0, 0],
    #             [1, 2, 3, 4, 5, 6, 0, 0, 0],
    #             [0, 0, 0, 0, 0, 0, 7, 0, 0],
    #             [0, 0, 0, 0, 0, 0, 0, 0, 9]
    #         ],
    #     ])


if __name__ == '__main__':
    unittest.main()
